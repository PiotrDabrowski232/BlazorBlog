@page "/LogUser"

@using Blog.Logic.Dto.UserDtos
@using Blog.Logic.Authentication

@inject IJSRuntime JS
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blog.Logic.Services.Interfaces.IUserService _userService
@inject NavigationManager NavManager

@code {
    public LoginUserDto user = new LoginUserDto();

    private async Task Authenticate()
    {
        var userAccount = _userService.VerifyUser(user);

        if (userAccount == null || user.Password != userAccount.Password)
        {
            await JS.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            Email = userAccount.Email,
            Role = userAccount.Role
        });

        NavManager.NavigateTo("/", true);
    }
}
<h3>Login Panel</h3>

<EditForm Model="user">


    <label>
        Email:<br />
        <input type="email" @bind="user.Email" /><br /><br />
    </label><br />

    <label>
        Password:<br />
        <input type="password" @bind="user.Password" /><br /><br />
    </label><br />

 

    <input type="submit" value="Submit" @onclick="Authenticate" />



</EditForm>


