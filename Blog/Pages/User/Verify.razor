@page "/Verify"
@inject NavigationManager NavManager
@inject IUserService _userService
@inject NotificationService NotificationService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center">Verification Code</h3>

            @if (!string.IsNullOrEmpty(UserEmail))
            {
                <p class="text-center">Please enter the verification code sent to <strong>@UserEmail</strong>:</p>

                <EditForm Model="@this" OnValidSubmit="@VerifyCode">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="VerificationCode" class="text-center">Verification Code:</label>
                        <InputText id="VerificationCode" @bind-Value="VerificationCode" class="form-control" />
                        <ValidationMessage For="@(() => VerificationCode)" />
                    </div>

                    <div class="text-center">
                        <button type="submit" id="verifyButton" class="btn btn-primary">Verify</button>
                    </div>
                </EditForm>
            }
            else
            {
                <p class="text-center text-danger">Error: User email not provided.</p>
            }
        </div>
    </div>
</div>

@code {
    private string UserEmail { get; set; }
    private string VerificationCode { get; set; }

    protected override void OnInitialized()
    {
        UserEmail = NavManager.Uri.Split("?UserEmail=")[1];
    }

    private async void VerifyCode()
    {
        try
        {
            var result = _userService.AccountVerification(UserEmail, VerificationCode);
            if (result.IsCompletedSuccessfully)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Account Verified", Duration = 2500 });
                await Task.Delay(2500);
                NavManager.NavigateTo($"/Login", true);
            }
        }
        catch(Exception e)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = $"{e.Message}", Duration = 2500 });
            await Task.Delay(2500);
        }
    }
}
